import requests

from src.config import Config, Mode
from src.logger_setup import logger

class YouTrackAPI:
    def __init__(self, token: str, url: str = "https://youtrack.cloud/api", project: str = "0-2"):
        self.url = url
        self.token = token
        self.project = project
        self.headers = {
            "Authorization": f"Bearer {self.token}",
            "Content-Type": "application/json"
        }

def report_to_youtrack_as_issue(config: Config, youtrack: YouTrackAPI, json_data: dict, markdown_data: str) -> str|None:
    """
    Report the results to YouTrack as an issue.
    :param config: Configuration object containing settings.
    :param youtrack: YouTrackAPI instance
    :param json_data: JSON data containing the report details
    :param markdown_data: Optional markdown data for the issue description
    """

    # we have to replace the path from the element screenshot image to later find an attachment
    # mask is '[Element Screenshot](screenshots/' remove the 'screenshot/' part from it
    markdown_data = markdown_data.replace("![Element Screenshot](screenshots/", "![Element Screenshot](")

    if config.mode == Mode.AXE:
        # Check if there are any violations
        axe_violations = [
            result for url_data in json_data.get("urls", [])
            for result in url_data.get("results", [])
            if result.get("violations", [])
        ]

        if axe_violations:
            summary = f"[Autogenerated Issue] Axe Report - {json_data.get('timestamp')}"
            yt_id = create_issue_bug(youtrack, summary, markdown_data)
            if yt_id is None:
                logger.warning("Failed to create issue in YouTrack")
                return None
            add_attachments_to_issue(youtrack, yt_id, build_attachments_mode_axe(json_data))

            return yt_id
        else:
            logger.info("No violations found, no issue for youtrack created.")
            return None
    else:
        non_compliant_elements = [
            result for url_data in json_data.get("urls", [])
            for result in url_data.get("results", [])
            if result.get("meets_wcag") is False
        ]

        if non_compliant_elements:
            summary = f"[Autogenerated Issue] Contrast Ratio Report - {json_data.get('timestamp')}"
            yt_id = create_issue_bug(youtrack, summary, markdown_data)
            if yt_id is None:
                logger.warning("Failed to create issue in YouTrack")
                return None
            add_attachments_to_issue(youtrack, yt_id, build_attachments_mode_contrast(json_data))

            return yt_id
        else:
            logger.info("No non-compliant elements found, no issue for youtrack created.")
            return None

def build_attachments_mode_contrast(json_data: dict) -> list:
    attachments = [
        url_data.get("screenshot_outline") for url_data in json_data.get("urls", [])
        if "screenshot_outline" in url_data
    ]
    attachments += [
        result.get("screenshot") for url_data in json_data.get("urls", [])
        for result in url_data.get("results", [])
        if "screenshot" in result
    ]

    # add the screenshot_outline attachment from urls
    logger.debug(f"Attachments contrast axe mode: {len(attachments)}")
    return attachments

def build_attachments_mode_axe(json_data: dict) -> list:
    attachments = []
    attachments += [
        url_data.get("screenshot_outline") for url_data in json_data.get("urls", [])
        if "screenshot_outline" in url_data
    ]
    for url_data in json_data.get("urls", []):
        for result in url_data.get("results", []):
            for violation in result.get("violations", []):
                for node in violation.get("nodes", []):
                    element_info = node.get("element_info", {})
                    if "screenshot" in element_info:
                        attachments.append(element_info["screenshot"])

    logger.debug(f"Attachments for axe mode: {len(attachments)}")
    return attachments

def create_issue_bug(api_config: YouTrackAPI, summary: str, description: str) -> str|None:
    json_data_template = {
        "project": {"id": api_config.project},
        "summary": summary,
        "description": description,
        "customFields": [
            {
                "$type": "SingleEnumIssueCustomField",
                "name": "Type",
                "value": {"name": "Bug", "$type": "EnumBundleElement"}
            }
        ]
    }
    url = f"{api_config.url}/issues"
    logger.info(f"Creating youtrack issue with url: {url} - summary: {summary}")
    response = requests.post(url, headers=api_config.headers, json=json_data_template)
    if response.status_code == 200:
        json_response = response.json()
        logger.debug(f"Youtrack issue created successfully: {json_response}")
        return json_response.get('id')
    else:
        logger.warning(f"Error creating youtrack issue: {response.status_code} - {response.text}")
        return None

def add_attachments_to_issue(api_config: YouTrackAPI, issue_id: str, attachments: list) -> None:
    """
    Add attachments to the issue in YouTrack.
    :param api_config: YouTrackAPI instance
    :param issue_id: The ID of the issue to which attachments will be added
    :param json_data: JSON data containing the attachments
    """
    logger.info(f"Adding attachments to issue {issue_id}")

    if not attachments:
        logger.info("No attachments for issues to add.")
        return
    logger.info(f"Attachments found ({len(attachments)}) adding them might take a while.")
    if len(attachments) > 500:
        logger.warning("YouTrack API only allows 500 attachments per issue. Skipping the rest. Some images will be broken.")
        attachments = attachments[:500]

    # YouTrack API endpoint for adding attachments
    url = f"{api_config.url}/issues/{issue_id}/attachments"

    attachment_header = api_config.headers
    attachment_header.pop("Content-Type", None)

    # Iterate through the attachments and upload them
    for attachment in attachments:
        try:
            with open(attachment, 'rb') as file:
                files = {'file': file}
                response = requests.post(url, headers=attachment_header, files=files)
                if response.status_code == 200:
                    logger.debug(f"Attachment {attachment} added successfully")
                else:
                    logger.warning(f"Error adding attachment {attachment}: {response.status_code} - {response.text}")
        except FileNotFoundError:
            logger.warning(f"Attachment file not found (skipping): {attachment}")
        print(".", end="", flush=True) # indicator as dot per attachment
    print("")


